{
	"info": {
		"_postman_id": "f47ac10b-58cc-4372-a567-0e02b2c3d480",
		"name": "SuperTokens Node.js Backend - Enhanced",
		"description": "Enhanced API collection with automated testing and environment variable management for SuperTokens Node.js Express Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üåç Health & Public",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status OK\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"OK\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check server health and status"
					}
				},
				{
					"name": "Public Hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Hello');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/hello",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"hello"
							]
						},
						"description": "Simple hello world endpoint - no authentication required"
					}
				},
				{
					"name": "Public Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains app info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('appName');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/public/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"public",
								"info"
							]
						},
						"description": "Get application information and available features"
					}
				}
			],
			"description": "Public endpoints that don't require authentication"
		},
		{
			"name": "üîê Authentication Flow",
			"item": [
				{
					"name": "1. Sign Up New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Save user ID if successful",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.user && jsonData.user.id) {",
									"        pm.environment.set(\"userId\", jsonData.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique email for testing",
									"const timestamp = Date.now();",
									"pm.environment.set(\"testEmail\", `test${timestamp}@example.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"formFields\": [\n    {\n      \"id\": \"email\",\n      \"value\": \"{{testEmail}}\"\n    },\n    {\n      \"id\": \"password\",\n      \"value\": \"{{password}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Register a new user with email and password"
					}
				},
				{
					"name": "2. Sign In User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Extract and save session cookies",
									"pm.test(\"Session cookies are set\", function () {",
									"    pm.expect(pm.response.headers.has('set-cookie')).to.be.true;",
									"});",
									"",
									"// Save user info if available",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.user && jsonData.user.id) {",
									"        pm.environment.set(\"userId\", jsonData.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"formFields\": [\n    {\n      \"id\": \"email\",\n      \"value\": \"{{email}}\"\n    },\n    {\n      \"id\": \"password\",\n      \"value\": \"{{password}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signin"
							]
						},
						"description": "Sign in an existing user"
					}
				},
				{
					"name": "3. Get Session Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains session data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('userId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"session"
							]
						},
						"description": "Get current session information (requires authentication)"
					}
				},
				{
					"name": "4. Sign Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Clear environment variables after signout",
									"pm.environment.unset(\"userId\");",
									"pm.environment.unset(\"accessToken\");",
									"pm.environment.unset(\"refreshToken\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signout"
							]
						},
						"description": "Sign out the current user (requires authentication)"
					}
				}
			],
			"description": "Complete authentication flow from signup to signout"
		},
		{
			"name": "üîí Protected Endpoints",
			"item": [
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (authenticated) or 401 (not authenticated)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});",
									"",
									"if (pm.response.code === 401) {",
									"    pm.test(\"Unauthorized response\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.include('unauthorised');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/protected/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"profile"
							]
						},
						"description": "Get user profile information (requires authentication)"
					}
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (authenticated) or 401 (not authenticated)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"bio\": \"Software Developer with SuperTokens\",\n  \"preferences\": {\n    \"theme\": \"dark\",\n    \"notifications\": true,\n    \"language\": \"en\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/protected/update-profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"update-profile"
							]
						},
						"description": "Update user profile (requires authentication)"
					}
				},
				{
					"name": "Get Dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (authenticated) or 401 (not authenticated)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/protected/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"dashboard"
							]
						},
						"description": "Get user dashboard data with statistics and recent activity (requires authentication)"
					}
				}
			],
			"description": "Protected endpoints that require authentication"
		},
		{
			"name": "üß™ Testing & Errors",
			"item": [
				{
					"name": "404 - Non-existent Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/non-existent-endpoint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"non-existent-endpoint"
							]
						},
						"description": "Test 404 error handling for non-existent routes"
					}
				},
				{
					"name": "401 - Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response contains unauthorized message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('unauthorised');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/protected/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"profile"
							]
						},
						"description": "Test accessing protected route without authentication (should return 401)"
					}
				},
				{
					"name": "Invalid Signup Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code indicates error (400 or 500)\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Test signup with invalid data format"
					}
				}
			],
			"description": "Endpoints for testing error scenarios and edge cases"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Making request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has JSON content-type', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}
